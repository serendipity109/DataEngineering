# 18.2
docker cp ./pg15.txt namenode:/input

curl -O https://repo1.maven.org/maven2/org/apache/hadoop/hadoop-mapreduce-examples/2.7.1/hadoop-mapreduce-examples-2.7.1.jar

hadoop jar hadoop-mapreduce-examples-2.7.1.jar wordcount /input /output

# final
docker cp testprogram/ namenode:/home

hdfs dfs -ls /inputMapReduce

export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/jre/
export CLASSPATH="$HADOOP_HOME/share/hadoop/mapreduce/hadoop-mapreduce-client-core-3.2.1.jar:$HADOOP_HOME/share/hadoop/mapreduce/hadoop-mapreduce-client-common-3.2.1.jar:$HADOOP_HOME/share/hadoop/common/hadoop-common-3.2.1.jar:~/testprogram/SalesCountry/*:$HADOOP_HOME/lib/*"
export HDFS_NAMENODE_USER="root"
export HDFS_DATANODE_USER="root"
export HDFS_SECONDARYNAMENODE_USER="root"
export YARN_RESOURCEMANAGER_USER="root"
export YARN_NODEMANAGER_USER="root"


cd /home/testprogram/testprogram
javac -d . SalesMapper.java SalesCountryReducer.java SalesCountryDriver.java
```
javac：Java Compiler（編譯器）。

-d .：指定 編譯後的 class 檔案要輸出到目前目錄（.）。

SalesMapper.java SalesCountryReducer.java SalesCountryDriver.java：這三個是要編譯的原始碼檔案。

javac 這步是把 .java 原始碼 ➔ .class 可以執行的 Java bytecode
```

jar cfm ProductSalePerCountry.jar Manifest.txt SalesCountry/*.class
# 把剛剛編譯好的 .class 檔案，打包成一個 .jar 檔案（Java Archive）。

$HADOOP_HOME/bin/hadoop jar ProductSalePerCountry.jar /inputMapReduce /mapreduce_output_sales
